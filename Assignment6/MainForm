using OrderManagement.Core;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Windows.Forms;

namespace OrderManagement.WinForms
{
    public partial class MainForm : Form
    {
        private OrderService orderService = new OrderService();
        private BindingSource orderBindingSource = new BindingSource();
        private BindingSource detailBindingSource = new BindingSource();

        public MainForm()
        {
            InitializeComponent();
            InitializeDataBinding();
            LoadOrders();
        }

        private void InitializeDataBinding()
        {
            // 订单列表绑定
            orderBindingSource.DataSource = typeof(Order);
            dgvOrders.DataSource = orderBindingSource;
            dgvOrders.AutoGenerateColumns = false;

            // 订单明细绑定
            detailBindingSource.DataSource = orderBindingSource;
            detailBindingSource.DataMember = "Details";
            dgvDetails.DataSource = detailBindingSource;
            dgvDetails.AutoGenerateColumns = false;

            // 设置DataGridView列
            ConfigureDataGridViewColumns();
        }

        private void ConfigureDataGridViewColumns()
        {
            // 订单列表列
            dgvOrders.Columns.Clear();
            dgvOrders.Columns.Add(new DataGridViewTextBoxColumn
            {
                DataPropertyName = "OrderId",
                HeaderText = "订单号",
                Name = "colOrderId"
            });
            dgvOrders.Columns.Add(new DataGridViewTextBoxColumn
            {
                DataPropertyName = "Customer",
                HeaderText = "客户",
                Name = "colCustomer"
            });
            dgvOrders.Columns.Add(new DataGridViewTextBoxColumn
            {
                DataPropertyName = "OrderDate",
                HeaderText = "日期",
                Name = "colOrderDate",
                DefaultCellStyle = new DataGridViewCellStyle { Format = "yyyy-MM-dd" }
            });
            dgvOrders.Columns.Add(new DataGridViewTextBoxColumn
            {
                DataPropertyName = "TotalAmount",
                HeaderText = "总金额",
                Name = "colTotalAmount",
                DefaultCellStyle = new DataGridViewCellStyle { Format = "C2" }
            });

            // 订单明细列
            dgvDetails.Columns.Clear();
            dgvDetails.Columns.Add(new DataGridViewTextBoxColumn
            {
                DataPropertyName = "ProductName",
                HeaderText = "商品名称",
                Name = "colProductName"
            });
            dgvDetails.Columns.Add(new DataGridViewTextBoxColumn
            {
                DataPropertyName = "Price",
                HeaderText = "单价",
                Name = "colPrice",
                DefaultCellStyle = new DataGridViewCellStyle { Format = "C2" }
            });
            dgvDetails.Columns.Add(new DataGridViewTextBoxColumn
            {
                DataPropertyName = "Quantity",
                HeaderText = "数量",
                Name = "colQuantity"
            });
            dgvDetails.Columns.Add(new DataGridViewTextBoxColumn
            {
                DataPropertyName = "TotalAmount",
                HeaderText = "小计",
                Name = "colDetailTotalAmount",
                DefaultCellStyle = new DataGridViewCellStyle { Format = "C2" }
            });
        }

        private void LoadOrders()
        {
            try
            {
                var orders = orderService.GetAllOrders();
                orderBindingSource.DataSource = orders;
                lblStatus.Text = $"共 {orders.Count} 条订单";
            }
            catch (Exception ex)
            {
                MessageBox.Show($"加载订单失败: {ex.Message}", "错误", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btnAdd_Click(object sender, EventArgs e)
        {
            var editForm = new OrderEditForm(null, orderService);
            if (editForm.ShowDialog() == DialogResult.OK)
            {
                LoadOrders();
            }
        }

        private void btnEdit_Click(object sender, EventArgs e)
        {
            if (orderBindingSource.Current == null)
            {
                MessageBox.Show("请先选择要编辑的订单", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            var currentOrder = (Order)orderBindingSource.Current;
            var editForm = new OrderEditForm(currentOrder, orderService);
            if (editForm.ShowDialog() == DialogResult.OK)
            {
                LoadOrders();
            }
        }

        private void btnDelete_Click(object sender, EventArgs e)
        {
            if (orderBindingSource.Current == null)
            {
                MessageBox.Show("请先选择要删除的订单", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            if (MessageBox.Show("确定要删除此订单吗?", "确认删除", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                try
                {
                    var currentOrder = (Order)orderBindingSource.Current;
                    orderService.RemoveOrder(currentOrder.OrderId);
                    LoadOrders();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"删除订单失败: {ex.Message}", "错误", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        private void btnQuery_Click(object sender, EventArgs e)
        {
            var queryForm = new QueryForm();
            if (queryForm.ShowDialog() == DialogResult.OK)
            {
                try
                {
                    List<Order> result = null;
                    switch (queryForm.QueryType)
                    {
                        case QueryType.ByOrderId:
                            result = new List<Order> { orderService.GetOrderById(queryForm.OrderId) };
                            break;
                        case QueryType.ByProductName:
                            result = orderService.GetOrdersByProductName(queryForm.ProductName);
                            break;
                        case QueryType.ByCustomer:
                            result = orderService.GetOrdersByCustomer(queryForm.Customer);
                            break;
                        case QueryType.ByAmountRange:
                            result = orderService.GetOrdersByAmountRange(queryForm.MinAmount, queryForm.MaxAmount);
                            break;
                    }

                    if (result == null || result.Count == 0)
                    {
                        MessageBox.Show("没有找到匹配的订单", "查询结果", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    else
                    {
                        orderBindingSource.DataSource = result;
                        lblStatus.Text = $"找到 {result.Count} 条匹配订单";
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"查询失败: {ex.Message}", "错误", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        private void btnReset_Click(object sender, EventArgs e)
        {
            LoadOrders();
        }

        private void btnSort_Click(object sender, EventArgs e)
        {
            var sortForm = new SortForm();
            if (sortForm.ShowDialog() == DialogResult.OK)
            {
                try
                {
                    switch (sortForm.SortType)
                    {
                        case SortType.ByOrderId:
                            orderService.SortOrders();
                            break;
                        case SortType.ByTotalAmount:
                            orderService.SortOrders((o1, o2) => o1.TotalAmount.CompareTo(o2.TotalAmount));
                            break;
                        case SortType.ByCustomer:
                            orderService.SortOrders((o1, o2) => o1.Customer.CompareTo(o2.Customer));
                            break;
                        case SortType.ByOrderDate:
                            orderService.SortOrders((o1, o2) => o1.OrderDate.CompareTo(o2.OrderDate));
                            break;
                    }

                    LoadOrders();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"排序失败: {ex.Message}", "错误", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        private void MainForm_Load(object sender, EventArgs e)
        {
            // 设置窗口最小大小
            this.MinimumSize = new System.Drawing.Size(800, 600);
        }

        private void MainForm_Resize(object sender, EventArgs e)
        {
            // 调整控件布局以适应窗口大小变化
            int margin = 10;
            int buttonHeight = btnAdd.Height;
            int buttonWidth = 100;

            btnAdd.Location = new System.Drawing.Point(margin, margin);
            btnEdit.Location = new System.Drawing.Point(btnAdd.Right + margin, margin);
            btnDelete.Location = new System.Drawing.Point(btnEdit.Right + margin, margin);
            btnQuery.Location = new System.Drawing.Point(btnDelete.Right + margin, margin);
            btnSort.Location = new System.Drawing.Point(btnQuery.Right + margin, margin);
            btnReset.Location = new System.Drawing.Point(btnSort.Right + margin, margin);

            int gridTop = btnAdd.Bottom + margin;
            int gridHeight = this.ClientSize.Height - gridTop - lblStatus.Height - margin * 2;

            dgvOrders.Location = new System.Drawing.Point(margin, gridTop);
            dgvOrders.Size = new System.Drawing.Size(this.ClientSize.Width - margin * 2, gridHeight / 2);

            dgvDetails.Location = new System.Drawing.Point(margin, dgvOrders.Bottom + margin);
            dgvDetails.Size = new System.Drawing.Size(this.ClientSize.Width - margin * 2, gridHeight / 2);

            lblStatus.Location = new System.Drawing.Point(margin, dgvDetails.Bottom + margin);
        }
    }

    public enum QueryType
    {
        ByOrderId,
        ByProductName,
        ByCustomer,
        ByAmountRange
    }

    public enum SortType
    {
        ByOrderId,
        ByTotalAmount,
        ByCustomer,
        ByOrderDate
    }
}
